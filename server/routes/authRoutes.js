const express = require('express');

// after registering a User model, on models/user.js,
// we can get a referance to it from mongoose.
// this reference will be used to manipulate a User object.
const mongoose = require('mongoose');

const jwt = require('jsonwebtoken');

const SECRET_KEY = 'SECRET_KEY';

const User = mongoose.model('User');
/**
 * we can define several routes with related functionalities,
 * that are grouped together under won 'router'
 *
 * exporting this routes lets us use it in the app,
 * with:
 * app.use(exportedRouter)
 */
const authRoutes = express.Router();

authRoutes.post('/signup', (req, res) => {

    const credentials = req.body;

    // using the User model to create a new user.
    const newUser = new User(credentials);

    // user.save will try to write it to the DB.
    // mongoose itself does the checking for existing usernames,
    // and existence of required fields.
    newUser.save()
    .then((newRecord) => {
        console.log('saved: ');
        console.log(newRecord);

        // create a JWT, with the new user record _id (generated by mongoDB)
        const token = jwt.sign({
            userId: newRecord._id
        }, SECRET_KEY);

        res.send({
            token
        });
    }).catch(err => {
        console.log('sending error');
        // the res.send is a side-effect, doesn't need to be returned,
        // but this way we can make sure this function will exit.
        return res.status(422).send(err.message);
    })
});

authRoutes.post('/signin', (req, res) => {

    const { username, password } = req.body;

    if(!username || !password){
        return res.status(422).send('MUST PROVIDE USERNAME AND PASSWORD')
    }

    // look in DB for a user with specified username
    User.findOne({ username }).then(user => {

        // if user is null - no such username exists in db
        if(!user){
            return res.status(404).send('USERNAME NOT FOUND');
        }

        // if user with this username is found,
        // we can now compare it's password with the currently given password
        // this is the custom method we gave the User model
        user.comparePassword(password)
        .then(isValidUser => {
            console.log('valid user!');

            // generate a new jwt, and respond with it to the client
            const token = jwt.sign({
                userId: user._id
            }, SECRET_KEY);

            res.send({
                token
            });
        })
        .catch((err) => {
            console.log('invalid user password!');

            res.status(401).send(err);
        })

    })

});

module.exports = authRoutes;